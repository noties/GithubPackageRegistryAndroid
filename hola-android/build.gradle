apply plugin: 'com.android.library'

android {

    compileSdkVersion config['target-sdk']
    buildToolsVersion config['build-tools']

    defaultConfig {
        minSdkVersion config['min-sdk']
        targetSdkVersion config['target-sdk']
        versionCode 1
        versionName version
    }
}

dependencies {
    api deps['x-annotations']
    api deps['adapt']
}

if (false && hasProperty('release')) {
    apply plugin: 'digital.wup.android-maven-publish'
    publishing {
        repositories {
            maven {
                url = uri("https://maven.pkg.github.com/noties/GithubPackageRegistryAndroid")
                credentials {
                    username = 'noties'
                    password = GITHUB_PACKAGE_REGISTRY_TOKEN
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                // so, artifactId will be ${groupId}.${artifactId}
                // and actual maven group id will be com.github.${user}
                //
                // cannot publish of same version (it's not bad, just to know)
//                groupId 'io.noties.gpra'
                artifactId 'hola'
                version VERSION_NAME

                from(components.android)
            }
        }
    }
}

if (true && hasProperty('release')) {

    apply plugin: 'maven'

    afterEvaluate { project ->
        uploadArchives {
            repositories {
                mavenDeployer {

//                    pom.groupId = GROUP
                    pom.artifactId = 'hola2'
                    pom.version = VERSION_NAME

                    repository(url: 'https://maven.pkg.github.com/noties/GithubPackageRegistryAndroid') {
                        authentication(userName: 'noties', password: GITHUB_PACKAGE_REGISTRY_TOKEN)
                    }
                }
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            archives androidSourcesJar
            archives androidJavadocsJar
        }
    }

}


